package generator

import (
	"context"
)

func Or[T any](ctx context.Context, chs ...<-chan T) <- chan T {
	switch len(chs) {
	case 0:
		return nil
	case 1:
		return chs[0]
	}
	s := make(chan T)
	go func() {
		defer close(s)

		switch len(chs) {
		case 2:
			select {
			case <- chs[0]:
			case <- chs[1]:
			}
		default:
			select {
			case <- chs[0]:
			case <- chs[1]:
			case <- chs[2]:
			case <-Or(ctx, append(chs[3:], s)...):
			}
		}
	}()
	return s
}
